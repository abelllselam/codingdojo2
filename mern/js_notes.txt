How to start a react app -
- npx create-react-app  => in the folder i am working on
- Do not name the react file the same name as the folder
- the naming is lowercase and separated by - or _
- Going forward we will always use developer tools => right click and inspect then console. Always have this open!

After starting react this are the two files we care about are:
- App.js and packages.json
- all react components are Pascal case
- rafce  - snipit for creating a component


To Submit
- explorer . in gitbash
- highlight everything except node_modules and then zip the files then submit.


The react scripts:
<script crossorigin="" src="https://unpkg.com/react@16/umd/react.development.js"></script>
<script crossorigin="" src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script> 

- return (
for multiple line returns 
)

or at least one thing must be on the same line;

return <div>

</div>

state: Anything that changes needs to have a state.



How to start a react app
- npx create-react-app  => in the folder i am working on
- Do not name the react file the same name as the folder
- the naming is lowercase and separated by - or _
- Going forward we will always use developer tools => right click and inspect then console. Always have this open!

After starting react this are the two files we care about are:
- App.js and packages.json


10/30/2023
JSON - Javascript object notation
REST (Representational State Transfer)- if you route has aroute that includes api then its considered REST API- post/api/users 
Check the rest_api.png


To install AXIOS:
stop the application and then make sure that you are on the same folder level as package.jason.
then npm install axios
AXIOS - wraps the res in its own .data key - so it will be in response.data

10/31/2023
npm install react-router-dom before working on the routing and we also need to be on the same folder level as package.jason
Then import browser rapper


11/01/2023

Steps to create a express server:

1. create server.js for express (touch server.js or create server.js)express is the server side node serverside - It has nothing to do with react at this point.
2. npm init -y - the y is to say everything yes
3. npm i express - must be installed parallel to the package.jason
	-create a file called server.js which needs to be parallel to the package.json - this file will be the entry point(main) in the package.jason file.
	- in server.js - 
		const express = require("express");
		const app = express();
		const PORT = 8000; //(it can be any port it just by convention)

		// make sure these lines are above any app.get or app.post code blocks
		//MIDDLEWARE
		app.use( express.json() ); //parse
		app.use( express.urlencoded({ extended: true }) ); //if the database sends you anything weird still parse the data


		//Routes
		app.get("/api", (req, res) => {
			res.json({message: "Hello World" });
		
		});

		//To start a server at the very bottom of the file
		app.listen(PORT, () => console.log(`>>> Server is up and running on PORT $(PORT) and is listening for REQuests to RESpond to`))
	
	-To run this server file.
		-node server.js
		-go to localhost:8000/api - and you should see "Hello World"

4. nodemon server.js - so that we dont have to restart the server everytime. 


nodemon - node monitor

5. Start postman - used when to avoid writing code to test the serverside. The actual database is still not up and running we can add, delete and patch new infor using postman to test things - In postman you can direct the API call to it and then access the API info from here instead of direct address 
	-The first thing is to create a new tab then type the address in the URL text area.
	- to post it is suggested that you select body -> row -> JSON


11/16/2023

How to setup the server folder:

1.create a server folder
2.create the config, controllers,models, routes (mkdir config controllers models routes) everything must be in the server folder.
3.Also, have the server.js and .env files in the server folder

The actual terminal comands after cd into the server folder:
4.npm init -y
5.npm install mongoose express dotenv cors //The cors is the part where it tells the server that it is pkay for port 3000 to access stuff from the server.

6.Add this code - require('dotenv').config(); - inside the server.js - This is just so that the server file would rung the .env file where out secret password and other sensetive information is stored
7.create mongoose.config.js file in the config folder - we use this to connect to the database

8.Bring the connection string from the mongo atlas and then put the below code in the mongoose.cinfig.js - select connect -> drivers -> then copy the string

const mongoose = require("mongoose");
const dbName = process.env.DB;
const username = process.env.ATLAS_USERNAME;
const pw = process.env.ATLAS_PASSWORD;
const uri = `mongodb+srv://${username}:${pw}@cluster0.whqor0t.mongodb.net/${dbName}?retryWrites=true&w=majority`;
mongoose
  .connect(uri)
  .then(() =>
    console.log(
      `游니游니游니游니游니游뿛游뿛游뿛Established a connection to the ${dbName} database`
    )
  )
  .catch((err) =>
    console.log(
      "游녩游녩游녩游녩游녩游녩Something went wrong when connecting to the database",
      err
    )
  );



The uri needs to be updated with the string from the mongo atlas.


9.Put the following in the .env file and update the DB, username and password accordingly

PORT=8000
DB=my_db
# mongo atlas connection
ATLAS_USERNAME=YOUR_ATLAS_USERNAME
ATLAS_PASSWORD=YOUR_ATLAS_PASSWORD

10.In the models folder create a model: movie.model.js and then paste the code below: (the movie.model.js - part the movie is what ever the db we are trying to create, update throughout accordingly)

The following is including the validation:


//the model -the rules the entries or inserts need to follow

const mongoose = require("mongoose");

const UserSchema = new mongoose.Schema(
  {
    first_name: {
      type: String,
      required: [true, "First name is required"],
      minlength: [6, "First name must be at least 6 characters long"]
    },
    last_name: {
      type: String,
      required: [true, "Last name is required"],
      maxlength: [20, "Last name must be at least 6 characters long"]
    },
    age: {
      type: Number,
      min: [1, "You must be at least 1 or older to register"],
      max: [150, "You must be at most 149 years old to register"]
    },
    email: { type: String, required: [true, "Email is required"] }
  },
  { timestamps: true }
);

const User = mongoose.model("User", UserSchema);

module.exports = User;



11.In the controllers folder create a file called whatevernameyouchoseforthemodel.controller.js - this will house all the logic for CRUD movies in this case

12.Then paste the following into the controller file. After that highlight the movie singlular noun and then ctrl + Shift + L then make the change to what ever your desired name is:



const Movie = require("../models/movie.model");

module.exports.findAllMovies = (req, res) => {
  Movie.find()
    .then((allDaMovies) => {
      res.json(allDaMovies);
    })
    .catch((err) => {
      res.json(err);
    });
};

module.exports.findOneSingleMovie = (req, res) => {
  Movie.findOne({ _id: req.params.id })
    .then((oneSingleMovie) => {
      res.json(oneSingleMovie);
    })
    .catch((err) => {
      res.json(err);
    });
};

module.exports.createNewMovie = (req, res) => {
  Movie.create(req.body)
    .then((newlyCreatedMovie) => {
      res.json(newlyCreatedMovie);
    })
    .catch((err) => {
      res.status(400).json(err);
    });
};

module.exports.updateExistingMovie = (req, res) => {
  Movie.findOneAndUpdate({ _id: req.params.id }, req.body, {
    new: true,
    runValidators: true,
  })
    .then((updatedMovie) => {
      res.json(updatedMovie);
    })
    .catch((err) => {
      res.json(err);
    });
};

module.exports.deleteAnExistingMovie = (req, res) => {
  Movie.deleteOne({ _id: req.params.id })
    .then((result) => {
      res.json(result);
    })
    .catch((err) => {
      res.json(err);
    });
};



The above looks like a promise (API request and response. However, it is not a promise per the docs)

13.In the routes folder create a file whatevernameyouchoseforthemodel.routes.js - this will be responsible for all the routes dealing with the model. It is importing everything that is being imported from the controller as seen in the code below that needs to be pasted in the file.


const UserController = require('../controllers/user.controller');
 
module.exports = app => {
    app.get('/api/users', UserController.findAllUsers);
    app.get('/api/users/:id', UserController.findOneSingleUser);
    app.patch('/api/users/:id', UserController.updateExistingUser);
    app.post('/api/users', UserController.createNewUser);
    app.delete('/api/users/:id', UserController.deleteAnExistingUser);
}

//********************************************************************************************The order of routes is important! for instance the following will never get to the allusers route because of the :id

//const UserController = require('../controllers/user.controller');
 
//module.exports = app => {
  //  app.get('/api/users/:id', UserController.findOneSingleUser);
  //  app.get('/api/users/allusers', UserController.findAllUsers);
//}

14.The server.js file should contain the following to run react app

const express = require("express");
const cors = require("cors");
const app = express();
require("dotenv").config();
const port = process.env.PORT;

require("./config/mongoose.config");

app.use(express.json(), express.urlencoded({ extended: true }));
app.use(cors());

const AllMyMovieRoutes = require("./routes/movie.routes");
AllMyMovieRoutes(app);

app.listen(port, () => console.log(`Listening on port: ${port}`));



**********************************************************************************************************************************************************************************************************************************************************************
____________------------------------------The second folder we will need is the React folder. In here we will create the react folder.

1. run another terminal which you can rename client
2. npx create-react-app client -  parallel to the server folder
3. Then add the dependancies - npm i axios react-router-dom
4. Then make sure to import BrowserRouter in the index.js file inside the src folder - import { BrowserRouter } from "react-router-dom";
5. Then wrap <App/>
	just like this:
		<BrowserRouter>
      			<App />
    		</BrowserRouter>


6. Have a Main.jsx file to make the axios calls.
7. npm start - to start the react app


11/18/2023
RE_RUN - after node_module deletion:

If the node_module is deleted and you want to start the project.
1. npm i - on both server and client side parallel to the package.json

























































