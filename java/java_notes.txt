- Very important to pascal case all java  files i.e JavaBasic
- Compile firt then run
	- to compile javac file.java
	- then the class file is created which means compiled and now we run it
	- java file - we are running the class that is created from file.java
	- File and class names must match and must be pascal case

11/28/2023
-Ctrl + shift + O (letter) - to bring all the dependencies (imports) in the spring tool.

12/10/2023
	To start with Spring boot project:

- File -> New -> Spring Starter Project
	- Name should be the project name
	- group should be the reverse domain and the package must be the same as the group
- Next -> 
	- It should be the latest Spring Boot version
	- Should bring in or select "Spring Boot DevTools" and "Spring Web"
- select Finish

	After the initial setup:
- The JSP files are to be created in the src -> main -> webapp
	- right-clicking on the 'webapp' folder, selecting 'New', (other) searching for 'jsp' and selecting 'JSP File' and name the 	jsp file. 
- There are three minor configuration steps before we can pass data from our controller to the .jsp file:
	- Create the src/main/webapp folder if it does not exist
	- Create the src/main/webapp/WEB-INF folder
	- Edit the src/main/resources/applications.properties file to contain the following code:

************************************

spring.mvc.view.prefix=/WEB-INF/
spring.datasource.url=jdbc:mysql://localhost:3306/<<YOUR_SCHEMA>>?
#createDatabaseIfNotExist=true #only if you want to create the database automatically
spring.datasource.username=<<dbuser>>
spring.datasource.password=<<dbpassword>>
spring.jpa.hibernate.ddl-auto=update
#this is to add the type hidden and set the value to something else from post like put.
spring.mvc.hiddenmethod.filter.enabled=true 

*************************************
		




imports: 
<!-- New line below to use the JSP Standard Tag Library to use c:out and other tags-->
	<%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core"%>
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> #this is form binding
	<%@ page isErrorPage="true" %>  #this is for error handling
	
- Must place <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> at the top of every JSP file for JSTL use.

- Add the following in the JSP file to render CSS and JS files and the location of the files must be in the src/main.resources/static/css or js folder:
	<link rel="stylesheet" type="text/css" href="/css/style.css">
	<script type="text/javascript" src="/js/app.js"></script>

- For bootstrap add the following in the head of the jsp:
	<!-- for Bootstrap CSS -->
	<link rel="stylesheet" href="/webjars/bootstrap/css/bootstrap.min.css" />
	<!-- YOUR own local CSS -->
	<link rel="stylesheet" href="/css/main.css"/>
	<!-- For any Bootstrap that uses JS -->
	<script src="/webjars/bootstrap/js/bootstrap.min.js"></script>

- In the application.properties:
	



************************************************Notes**********************************************
- controller - > services -> Domain model and Repository - > DB

	- The services uses the repository as a dependancy and 
	- The Domain model creates the table and prefilles the entities (attributes)
	- The Repository is an interface that needs to be implemented in the service as a dependancy basically queries the databases by extending the domain model
	Relationship Summary:
		Controller -> Service -> Repository: The flow of data and control typically goes from the controller to the service layer, and then to the repository for data access.

		Domain Model <-> Service <-> Repository: The service layer interacts with the domain model (entities) and uses the repository to persist or retrieve data.

		This separation of concerns helps in maintaining a clean and modular codebase, where each component has a specific responsibility in the application architecture. Keep in mind that these are simplified diagrams, and 		real-world applications might have additional layers or components for security, validation, and more.
	

***************************************************************************************************************
application.properties file

&&&&&&&&&&&&&

# Where are jsp files? HERE!
spring.mvc.view.prefix=/WEB-INF/
# Data Persistence
spring.datasource.url=jdbc:mysql://localhost:3306/<<YOUR_SCHEMA_NAME>>
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
# For Update and Delete method hidden inputs
spring.mvc.hiddenmethod.filter.enabled=true

&&&&&&&&&&&&&&&&&&
Not including Bcrypt:
Dependencies to add to pom.xml file:


        <!-- DEPENDENCIES FOR STARTING SPRING PROJECTS-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- DEPENDENCIES FOR DISPLAYING JSPS AND USING JSTL TAGS -->
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.servlet.jsp.jstl</groupId>
            <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>jakarta.servlet.jsp.jstl</artifactId>
        </dependency>
        <!-- DEPENDENCIES FOR INTEGRATING SQL DATABASE AND USING JPA -->
        <!-- Note: Project will not run until a schema has been created and the 
            proper settings in application properties are present for 
            connecting to a database. -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <!-- DEPENDENCY FOR USING VALIDATION ANNOTATIONS -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- DEPENDENCY FOR USING BCRYPT  -->
        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>
        <!-- DEPENDENCIES FOR BOOTSTRAP -->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>webjars-locator</artifactId>
            <version>0.46</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>5.2.3</version>
        </dependency>


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Dependencies to add with jbcrypt to pom.xml file:

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.servlet.jsp.jstl</groupId>
            <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>jakarta.servlet.jsp.jstl</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
    </dependencies>







&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&



JSP tag library imports, settings, external styling:


<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!-- c:out ; c:forEach etc. --> 
<%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %>
<!-- Formatting (dates) --> 
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"  %>
<!-- form:form -->
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<!-- for rendering errors on PUT routes -->
<%@ page isErrorPage="true" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Tacos</title>
    <link rel="stylesheet" href="/webjars/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/main.css"> <!-- change to match your file/naming structure -->
    <script src="/webjars/bootstrap/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="/js/app.js"></script><!-- change to match your file/naming structure -->
</head>
<body>
   
</body>
</html>


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
for created at and updated at. Its best practice include:

*********This goes after the member variables
@Column(updatable = false)
private Date createdAt;
private Date updatedAt;



**************This goes at the bottom:

@PrePersist // adds the created at date and time to sql on creation 
protected void onCreate() {
	this.createdAt = new Date();
}

@PreUpdate // add the updated at date and time when being updated
protected void onUpdate() {
	this.updatedAt = new Date();
}
